// Generated by CoffeeScript 1.12.7
(function() {
  var SessionStore, app, authCheck, bodyparser, db, express, level, levelws, metrics, morgan, session, user, user_router;

  express = require('express');

  bodyparser = require('body-parser');

  morgan = require('morgan');

  session = require('express-session');

  SessionStore = require('level-session-store')(session);

  level = require('level');

  levelws = require('level-ws');

  db = levelws(level(__dirname + "/../db"));

  metrics = require('./metrics')(db);

  user = require('./user')(db);

  app = express();

  app.set('port', '8888');

  app.set('views', __dirname + "/../views");

  app.set('view engine', 'pug');

  app.use(bodyparser.json());

  app.use(bodyparser.urlencoded());

  app.use(morgan('dev'));

  app.use(session({
    secret: "simple secret",
    store: new SessionStore('./db/sessions'),
    resave: true,
    saveUnitialized: true
  }));

  app.use('/', express["static"](__dirname + "/../public"));

  app.get('/', function(req, res) {
    return res.render('index', {
      text: "Hello " + req.session.username + " !"
    });
  });

  app.get('/hello/:name', function(req, res) {
    return res.send("Hello " + req.params.name);
  });

  authCheck = function(req, res, next) {
    if (!req.session.loggedIn) {
      return res.redirect('/auth');
    } else {
      return next();
    }
  };

  app.get('/auth', function(req, res) {
    return res.render('auth');
  });

  app.post('/auth', function(req, res) {
    var password, ref, username;
    ref = req.body, username = ref.username, password = ref.password;
    return user.get(username, function(err, user) {
      if (err) {
        throw next(err);
      }
      if (password !== user.password) {
        return res.redirect('/auth');
      } else {
        if (res.session == null) {
          res.session = {};
        }
        res.session.loggedIn = true;
        res.session.username = user.username;
        return res.redirect('/');
      }
    });
  });

  app.get('/logout', authCheck, function(req, res) {
    delete res.session.loggedIn;
    delete res.session.username;
    delete res.session;
    return res.redirect('/auth');
  });

  app.get('/metrics.json', function(req, res) {
    return metrics.get(1, function(err, data) {
      if (err((function() {
        throw err;
      })())) {

      } else {
        return res.status(200).json(data);
      }
    });
  });

  app.post('/metrics.json/:id', function(req, res) {
    return metrics.save(req.params.id, req.body, function(err) {
      if (err) {
        throw next(err);
      }
      return res.status(200).send('metrics saved');
    });
  });

  user_router = express.Router();

  user_router.get('/user/:username', function(req, res) {
    return user.get(req.params.username, function(err, user) {
      if (err) {
        throw next(err);
      }
      if (user === null) {
        return res.status(404).send("user not found");
      } else {
        return res.status(200).json(user);
      }
    });
  });

  user_router.post('/user', function(req, res) {
    var email, password, ref, username;
    ref = req.body.username, username = ref.username, password = ref.password, email = ref.email;
    return user.save(username, password, email, function(err) {
      if (err) {
        throw next(err);
      }
      return res.status(200).send("user saved");
    });
  });

  app.use(user_router);

  app.listen(app.get('port'), function() {
    return console.log("Server listening on " + (app.get('port')) + " !");
  });

}).call(this);
